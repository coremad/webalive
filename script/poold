#!/usr/bin/env perl
use strict;
use warnings FATAL => 'all';

use Mojo::UserAgent;
use Mojo::JSON qw(encode_json decode_json);
use Mojo::Log;
use Mojo::File qw(curfile);
use lib curfile->dirname->sibling('lib')->to_string;
use WebAlive::Model::Webkeeper;
use POSIX ":sys_wait_h";

use v5.20;

# use Data::Dumper;

my %kids;
my $log = Mojo::Log->new;
my $term = 0;
my $listener_pid;

$SIG{$_}  = sub { $term = 1; $log->info(" Exiting..."); } for('INT', 'TERM', 'QUIT');

$SIG{CHLD} = \&REAPER;
sub REAPER {
    my $kid;
    delete($kids{$kid}) while (($kid = waitpid(-1, &WNOHANG)) > 0);
    $SIG{CHLD} = \&REAPER;
}

sub check_url {
    my $row = shift;
    $row = decode_json($row) unless ref $row;
    my $keeper = WebAlive::Model::Webkeeper->new;
    my $ua  = Mojo::UserAgent->new;
    my $res;
    eval { $res = $ua->get($row->{url})->result; };
    my $log_id = $keeper->ins_log($row->{id}, $res->{code});
    return (0) unless $res and exists $res->{code} and exists $res->headers->{headers};
    my $headers = $res->headers->{headers};
    my $header_count = $keeper->config->{max_headers};
    foreach my $header_name (keys %{$headers}) {
        $keeper->ins_header($log_id, $header_name, encode_json($headers->{$header_name}));
        --$header_count or last();
    }
    $log->info("Done $row->{url}");
}

unless ($listener_pid = fork()) {
    my $keeper = WebAlive::Model::Webkeeper->new;
    $keeper->start_listen(\&check_url);
    exit;
}

do {{
    my $keeper = WebAlive::Model::Webkeeper->new;
    my $next_time = $keeper->config->{pool_interval} + time();
    $log->info(">\tStart checks");
    my $url_list = $keeper->url_list;
    foreach my $row (@$url_list) {
        last if $term;
        if (my $pid = fork()) {
            $kids{$pid} = time();
        }
        else {
            check_url($row);
            exit;
        }
        delete($kids{waitpid(-1, 0)}) while ($keeper->config->{max_workers} < scalar keys %kids);
    }
    $log->info(">\tDone, still running children:  " . scalar keys %kids);
    sleep(1) until ($next_time <= time() or $term);
}} until ( $term );

kill TERM => $listener_pid;

my $kid;
do {
    $kid = waitpid(-1, 0);
} while ($kid > 0);
